function [fig, ax] = plotContrastMatrices(models, names, threshold)
    % This function takes a cell array of mixed generalized linear models,
    % generated by fitglme, and a threshold value, then produces a panel plot
    % of contrast matrices for the variables with F statistics that exceed the
    % given threshold. The function returns the figure handle and the axes
    % handles.
    %
    % Usage: [fig, ax] = plotContrastMatrices(models, threshold)
    %
    % Input:
    % - models: a cell array containing mixed generalized linear models
    % - threshold: a threshold value for the F statistic
    %
    % Output:
    % - fig: handle to the created figure
    % - ax: handles to the created axes
    % Author:
    % - GPT4
    arguments
        models          cell
        names           string
        threshold       double = 50
    end
    
    % Check if the input is a cell array of models
    numModels = numel(models);
    if ~iscell(models) || numModels < 1 || numModels > 4
        error('The input must be a cell array containing between 1 and 4 mixed generalized linear models.');
    end
    if numModels ~= numel(names)
        error('The names do not match the models.');
    end

    % Find the variables with F statistics exceeding the threshold
    significantVars = {};
    for i = 1:numel(models)
        anovaResults = dataset2table(anova(models{i}));
        modelVariables = anovaResults.Term;
        Fstats = anovaResults.FStat;
        
        for j = 1:numel(modelVariables)
            if Fstats(j) > threshold && ~ismember(modelVariables(j), significantVars)
                significantVars = [significantVars, modelVariables(j)]; %#ok<AGROW> 
            end
        end
    end

    % Create the figure and the tiled layout
    fig = figure;
    numPlots = numel(significantVars);
    numRows = ceil(numPlots / 4);
    t = tiledlayout(numRows, 4, 'Padding', 'compact', 'TileSpacing', 'compact');
    ax = gobjects(1, numPlots);

    % Loop through the significant variables and create the contrast matrices plots
    for i = 1:numPlots
        ax(i) = nexttile(t);
        varName = significantVars{i};

        % Calculate the pairwise comparisons for the current variable
        [pairwiseComparisons, emm, emmCI] = mixedEffectsPairwiseComparisons(models{i}, varName, 0.05);

        % Create the contrast matrix
        nLevels = numel(emm);
        contrastMatrix = nan(nLevels);

        for j = 1:size(pairwiseComparisons, 1)
            row = pairwiseComparisons(j, 1);
            col = pairwiseComparisons(j, 2);
            contrastMatrix(row, col) = emmCI(row, 2) - emmCI(col, 1);
        end

        % Plot the contrast matrix
        imagesc(ax(i), contrastMatrix);
        colormap(ax(i), 'jet');
        colorbar(ax(i));

        % Set the axes labels and title
        set(ax(i), 'XTick', 1:nLevels, 'XTickLabel', 1:nLevels, ...
            'YTick', 1:nLevels, 'YTickLabel', 1:nLevels);
        xlabel(ax(i), 'Levels');
        ylabel(ax(i), 'Levels');
        title(ax(i), sprintf('Contrast Matrix for %s', varName));
    end
end
