function [ XC, XMean, offsets ] = calcLatentComponents( self, dlZ, args )
    % Calculate the funtional components using the response function
    arguments
        self                RepresentationModel
        dlZ                 {mustBeA( dlZ, {'dlarray', 'double'} )}
        args.maxObs         double {mustBeInteger} = 500
        args.smooth         logical = false
        args.responseFcn    function_handle
    end

    if isfield( args, 'responseFcn' ) 
        thisResponseFcn = args.responseFcn;
    else
        thisResponseFcn = self.LatentResponseFcn;
    end

    [XC, offsets] = self.calcResponse( dlZ, ...
                      sampling = 'Component', ...
                      modelFcn = thisResponseFcn, ...
                      maxObs = args.maxObs );

    % put XC into the appropriate structure
    % Points, Samples, Components, Channels
    XC = permute( XC, [3 2 1 4] );
    nSamples = size(XC, 2);

    % extract the mean curve based on Z
    XMean = XC( :, ceil(nSamples/2), :, : );
    
    switch self.ComponentCentering
        case 'Z'
            % centre about the curve generated by mean Z
            XC = XC - XMean;
        case 'X'
            % centre about the mean generated curve
            XC = XC - mean( XC, length(size(XC)) );
    end

    if args.smooth
        % smooth to regularly-spaced time span
        XCSmth = zeros( length(self.TSpan.Regular), ...
                        size(XC,2), size(XC,3), size(XC,4) );
        for c = 1:size(XC,4)
            XCSmth(:,:,:,c) = smoothSeries( XC(:,:,:,c), ...
                                 self.TSpan.Target, ...
                                 self.TSpan.Regular, ...
                                 self.FDA.FdParamsTarget );
        end
        XC = XCSmth;
    end

end
